[{"title":"CameraController","type":0,"sectionRef":"#","url":"api/CameraController","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CameraController","url":"api/CameraController#types","content":" "},{"title":"State​","type":1,"pageTitle":"CameraController","url":"api/CameraController#State","content":"enum &lt;/&gt; interface State { Following: 0-- Following a character Menu: 1-- In the menu Fixed: 2-- Unchanging, fixed to the most recent camera position } Represents the movement state of the character. "},{"title":"Properties​","type":1,"pageTitle":"CameraController","url":"api/CameraController#properties","content":" "},{"title":"Camera​","type":1,"pageTitle":"CameraController","url":"api/CameraController#Camera","content":"&lt;/&gt; CameraController.Camera: Camera  The current camera object for the player.  "},{"title":"State​","type":1,"pageTitle":"CameraController","url":"api/CameraController#State","content":"&lt;/&gt; CameraController.State: State The current state of the camera. "},{"title":"Functions​","type":1,"pageTitle":"CameraController","url":"api/CameraController#functions","content":" "},{"title":"SetState​","type":1,"pageTitle":"CameraController","url":"api/CameraController#SetState","content":"&lt;/&gt; CameraController:SetState( state: State-- The State to set the camera to ) → () Sets the camera state to the given state, if not already set. "},{"title":"CharacterController","type":0,"sectionRef":"#","url":"api/CharacterController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#properties","content":" "},{"title":"Character​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#Character","content":"&lt;/&gt; CharacterController.Character: Character The current Character component.  "},{"title":"CharacterPosition​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterPosition","content":"&lt;/&gt; CharacterController.CharacterPosition: Vector3  The position of the character model, updated every frame that the character exists.  "},{"title":"CharacterEnum​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterEnum","content":"&lt;/&gt; CharacterController.CharacterEnum: table Same as Character.Enum, from the Character Component.  "},{"title":"CharacterAdded​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterAdded","content":"events &lt;/&gt; CharacterController.CharacterAdded: GoodSignal Event that fires whenever a new character is created. Called with: character: Character -- The new character component characterPosition: Vector3 -- The spawn position of the character   "},{"title":"CharacterMoved​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterMoved","content":"events &lt;/&gt; CharacterController.CharacterMoved: GoodSignal Event that fires when the character moves. Takes into account the player ground offset, and fires with the fake model position rather than the true player position, since the true player position is only necessary for physics calculations. Called with: newPosition: Vector3 -- The new position of the character model oldPosition: Vector3 -- The old position of the character model characterOffset: number -- The offset of the character to reach the ground (in world space)   "},{"title":"CharacterDied​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterDied","content":"events &lt;/&gt; CharacterController.CharacterDied: GoodSignal Event that fires when the character dies. Called with: position: Vector3 -- The true position of the character model at the moment it dies   "},{"title":"CharacterDestroyed​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CharacterDestroyed","content":"events &lt;/&gt; CharacterController.CharacterDestroyed: GoodSignal Event that fires when the character is destroyed. Is not called with anything. "},{"title":"Functions​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#functions","content":" "},{"title":"CreateCharacter​","type":1,"pageTitle":"CharacterController","url":"api/CharacterController#CreateCharacter","content":"&lt;/&gt; CharacterController:CreateCharacter() → () Creates a new character, and will destroy the current character if one already exists. "},{"title":"Character","type":0,"sectionRef":"#","url":"api/Character","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Character","url":"api/Character#types","content":" "},{"title":"State​","type":1,"pageTitle":"Character","url":"api/Character#State","content":"enum &lt;/&gt; interface State { Default: &quot;Default&quot;-- Default movement state Flying: &quot;Flying&quot;-- Flying movement state } Represents the movement state of the character. "},{"title":"Properties​","type":1,"pageTitle":"Character","url":"api/Character#properties","content":" "},{"title":"CharacterStateChanged​","type":1,"pageTitle":"Character","url":"api/Character#CharacterStateChanged","content":"events &lt;/&gt; Character.CharacterStateChanged: GoodSignal Event that fires when the character changes states. Called with: state: StateChanged -- The new state of the character   "},{"title":"ClassName​","type":1,"pageTitle":"Character","url":"api/Character#ClassName","content":"&lt;/&gt; Character.ClassName: string Will always be &quot;Character&quot;. Used to check the class name of the object.  "},{"title":"State​","type":1,"pageTitle":"Character","url":"api/Character#State","content":"&lt;/&gt; Character.State: State The state of the character.  "},{"title":"Model​","type":1,"pageTitle":"Character","url":"api/Character#Model","content":"&lt;/&gt; Character.Model: Model  Represents the character model of the Character. Contains the RootPart.  "},{"title":"RootPart​","type":1,"pageTitle":"Character","url":"api/Character#RootPart","content":"&lt;/&gt; Character.RootPart: BasePart  Represents the root part of the character model, all of the physics originates at the position of the root part. The Position of the Character object is the same as the root part's position.  "},{"title":"Speed​","type":1,"pageTitle":"Character","url":"api/Character#Speed","content":"&lt;/&gt; Character.Speed: number The unsigned horizontal velocity of the character (in studs/second). Used as the basis for physics calculations.  "},{"title":"Position​","type":1,"pageTitle":"Character","url":"api/Character#Position","content":"&lt;/&gt; Character.Position: Vector3  The position of the root part. Origin of all the physics calculations, regardless of state.  "},{"title":"Velocity​","type":1,"pageTitle":"Character","url":"api/Character#Velocity","content":"&lt;/&gt; Character.Velocity: Vector3  The unsigned velocity of the player. What this means is that it does not depend on the direction of gravity, or the movement direction of the player. In effect, it is relative to the actual character model.  "},{"title":"Died​","type":1,"pageTitle":"Character","url":"api/Character#Died","content":"events &lt;/&gt; Character.Died: GoodSignal Event that fires when the character dies. Called with: position: Vector3 -- The true position of the character model at the moment it dies   "},{"title":"Moved​","type":1,"pageTitle":"Character","url":"api/Character#Moved","content":"events &lt;/&gt; Character.Moved: GoodSignal Event that fires when the character moves. Takes into account the player ground offset, and fires with the fake model position rather than the true player position, since the true player position is only necessary for physics calculations. Called with: newPosition: Vector3 -- The new position of the character model oldPosition: Vector3 -- The old position of the character model characterOffset: number -- The offset of the character to reach the ground (in world space)   "},{"title":"StateChanged​","type":1,"pageTitle":"Character","url":"api/Character#StateChanged","content":"events &lt;/&gt; Character.StateChanged: GoodSignal Event that fires when the character changes states. Called with: state: StateChanged -- The new state of the character   "},{"title":"Destroyed​","type":1,"pageTitle":"Character","url":"api/Character#Destroyed","content":"events &lt;/&gt; Character.Destroyed: GoodSignal Event that fires when the character is destroyed. Is not called with anything. "},{"title":"Functions​","type":1,"pageTitle":"Character","url":"api/Character#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Character","url":"api/Character#new","content":"&lt;/&gt; Character.new( startPosition: Vector3? ,-- Starting position of the character, defaults to &lt;0,0,0&gt; collisionGroup: string?,-- Collision group of the character, defaults to &quot;Collidables&quot; imageProps: [State: string]?-- The image properties of the character, give each state its own image. Defaults to default character image properties. ) → Character-- generated Character object Generates a character model at startPosition, and builds a Character object to handle its physics. You can update the collision group as time goes on by calling :SetCollisionGroup(string).  "},{"title":"Destroy​","type":1,"pageTitle":"Character","url":"api/Character#Destroy","content":"&lt;/&gt; Character:Destroy() → () Destroys the Character object by destroying the character model, cleaning up events, and killing its metatable.  "},{"title":"Kill​","type":1,"pageTitle":"Character","url":"api/Character#Kill","content":"&lt;/&gt; Character:Kill( position: Vector3? -- The position that the character is killed at ) → () Kills the Character, eventually calling :Destroy() on it aswell.  "},{"title":"ForceJump​","type":1,"pageTitle":"Character","url":"api/Character#ForceJump","content":"&lt;/&gt; Character:ForceJump() → () Makes the character jump  "},{"title":"SetCollisionGroup​","type":1,"pageTitle":"Character","url":"api/Character#SetCollisionGroup","content":"&lt;/&gt; Character:SetCollisionGroup( collisionGroup: string-- sets the collision group for the character, defaults to &quot;Collidables&quot; ) → () Sets the raycast collision group for the physics engine  "},{"title":"SetState​","type":1,"pageTitle":"Character","url":"api/Character#SetState","content":"&lt;/&gt; Character:SetState( state: State-- State to set the character to ) → () Sets the state of the character.  "},{"title":"IsGrounded​","type":1,"pageTitle":"Character","url":"api/Character#IsGrounded","content":"&lt;/&gt; Character:IsGrounded() → boolean-- whether or not the character is grounded Returns whether or not the character was calculated to be grounded on the most recent physics step. This should be used by any outside source trying to figure out if the character is grounded as it does not require any additional calculations by the internal physics engine.  "},{"title":"IsAlive​","type":1,"pageTitle":"Character","url":"api/Character#IsAlive","content":"&lt;/&gt; Character:IsAlive() → boolean-- whether or not the character is alive Returns whether or not the character is alive. In other words, whether or not the physics engine has decide to kill the player or not.  "},{"title":"SwitchGravity​","type":1,"pageTitle":"Character","url":"api/Character#SwitchGravity","content":"&lt;/&gt; Character:SwitchGravity() → () Switches the direction of gravity. The player will keep their velocity relative to the world space, meaning that since the Velocity property is relative to the character, its Y value will switch.  "},{"title":"Jump​","type":1,"pageTitle":"Character","url":"api/Character#Jump","content":"&lt;/&gt; Character:Jump( enabled: boolean-- whether the character should jump or not ) → () Tells the internal physics engine whether or not the character should jump when they are grounded.  "},{"title":"Step​","type":1,"pageTitle":"Character","url":"api/Character#Step","content":"&lt;/&gt; Character:Step( dt: number-- The amount of time passed since the last physics step. This is not automatically calculated for debugging and other reasons. ) → () Updates the internal clock, and handles the core physics calculations of the Character object. Moves the character model, determines whether or not the character is grounded, and rotates the model accordingly. "},{"title":"InputController","type":0,"sectionRef":"#","url":"api/InputController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"InputController","url":"api/InputController#properties","content":" "},{"title":"_states​","type":1,"pageTitle":"InputController","url":"api/InputController#_states","content":"&lt;/&gt; InputController._states: [string: boolean]  warning This property is private, but has not been identified as such to make it easier to understand the StateChanged property regardless of docs settings. You should use the :IsActive() method to check states. Holds all of the input related states (controlled by pressing/holding an input using any of the selected keybinds).  "},{"title":"StateChanged​","type":1,"pageTitle":"InputController","url":"api/InputController#StateChanged","content":"events &lt;/&gt; InputController.StateChanged: [string: GoodSignal] Holds all of the events which are called whenever a state changes. For instance, you might have a boolean state called Jump, which is also a member of InputController._states. In this case Jump would also be a member of InputController, and would be fired whenever the Jump`` state changes from true -&gt; false, or false -&gt; true. All events here will be called with: boolean active -- whether or not the state is active (key/button pressed or not)   "},{"title":"Keybinds​","type":1,"pageTitle":"InputController","url":"api/InputController#Keybinds","content":"&lt;/&gt; InputController.Keybinds: [string: any?[]] Holds all of the keybind data. Keybind data is setup such that you have a string equal to any number of Enum.UserInputType's or Enum.KeyCode's.  "},{"title":"PrimaryInput​","type":1,"pageTitle":"InputController","url":"api/InputController#PrimaryInput","content":"&lt;/&gt; InputController.PrimaryInput: string Explicity states what the primary input is, which can be any one of the following: - &quot;Mouse&quot; - &quot;Gamepad&quot; - &quot;Touch&quot; Note that the keyboard is not considered to be a &quot;primary input&quot;, as it is not directly used to interact with the UI or world space. "},{"title":"Functions​","type":1,"pageTitle":"InputController","url":"api/InputController#functions","content":" "},{"title":"IsActive​","type":1,"pageTitle":"InputController","url":"api/InputController#IsActive","content":"&lt;/&gt; InputController:IsActive( stateName: string-- the state to check ) → boolean?-- whether or not the state is active Checks if a given input state is active or not (whether or not a key/button associated with a keybind is pressed or not). Returns nil if the state does not exist "},{"title":"SharedModules","type":0,"sectionRef":"#","url":"api/SharedModules","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SharedModules","url":"api/SharedModules#functions","content":" "},{"title":"Linecast​","type":1,"pageTitle":"SharedModules","url":"api/SharedModules#Linecast","content":"&lt;/&gt; SharedModules.Linecast( origin: Vector3 ,-- The origin of the boxcast direction: Vector3 ,-- The direction of the boxcast upVector: Vector3 ,-- The up vector of the boxcast height: number,-- The height of the box to cast raycastParams: RaycastParams,-- The raycast parameters minLength: number-- the minimum length of any returned cast, defaults to 0 ) → ( RaycastResult,-- The result of the linecast number-- The final length of the linecast ) Linecasts from an origin in a given direction. Returns the closest object hit, if present. "},{"title":"MapController","type":0,"sectionRef":"#","url":"api/MapController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MapController","url":"api/MapController#properties","content":" "},{"title":"Map​","type":1,"pageTitle":"MapController","url":"api/MapController#Map","content":"&lt;/&gt; MapController.Map: Map? The current Map component.  "},{"title":"StartPosition​","type":1,"pageTitle":"MapController","url":"api/MapController#StartPosition","content":"&lt;/&gt; MapController.StartPosition: Vector3?  The starting position on the current map.  "},{"title":"Chunks​","type":1,"pageTitle":"MapController","url":"api/MapController#Chunks","content":"&lt;/&gt; MapController.Chunks: Chunks The chunks of the current map. See: Map for the Chunks interface. "},{"title":"Functions​","type":1,"pageTitle":"MapController","url":"api/MapController#functions","content":" "},{"title":"LoadMap​","type":1,"pageTitle":"MapController","url":"api/MapController#LoadMap","content":"&lt;/&gt; MapController:LoadMap( mapName: string,-- The name of the map to load leftVision: number,-- The vision the player should have to the left, defaults to LEFT_VISION rightVision: number-- The vision the player should have to the left defaults to RIGHT_VISION ) → Map?-- the map loaded, returns nil if the map with the given name does not exist Loads a map from a base located in ReplicatedStorage/Maps. Displays a warning if the map does not exist.  "},{"title":"ReloadMap​","type":1,"pageTitle":"MapController","url":"api/MapController#ReloadMap","content":"&lt;/&gt; MapController:ReloadMap( map: Map?-- The map to use, only necessary if you want to reload a specific Map object. Defaults to self.Map. ) → () Reloads a Map around the starter position of the Map. Nearby chunks load instantly and do not run any animations. "}]