"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[948],{70051:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Generates a character model at ``startPosition``, and builds a Character object to handle its physics. \\nYou can update the collision group as time goes on by calling ``:SetCollisionGroup(string)``.","params":[{"name":"startPosition","desc":"Starting position of the character, defaults to <0,0,0>","lua_type":"Vector3?"},{"name":"collisionGroup","desc":"Collision group of the character, defaults to \\"Collidables\\"","lua_type":"string?"},{"name":"imageProps","desc":"The image properties of the character, give each state its own image. Defaults to default character image properties.","lua_type":"[State: string]?"}],"returns":[{"desc":"generated Character object","lua_type":"Character"}],"function_type":"static","source":{"line":163,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Destroy","desc":"Destroys the Character object by destroying the character model, cleaning up events, and killing its metatable.","params":[],"returns":[],"function_type":"method","source":{"line":251,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Kill","desc":"Kills the Character, eventually calling ``:Destroy()`` on it aswell.","params":[{"name":"position","desc":"The position that the character is killed at","lua_type":"Vector3?"},{"name":"finished","desc":"Whether or not the character died from finishing the level","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":268,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"ForceJump","desc":"Makes the character jump","params":[],"returns":[],"function_type":"method","source":{"line":314,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"SetCollisionGroup","desc":"Sets the raycast collision group for the physics engine","params":[{"name":"collisionGroup","desc":"sets the collision group for the character, defaults to \\"Collidables\\"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":326,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_castForwards","desc":"Casts a line of rays forwards in a vertical fashion.","params":[{"name":"position","desc":"The position of the character when making the forward linecast.","lua_type":"Vector3"},{"name":"castLength","desc":"The length of the forward cast, keep in mind that this is added to half of the width of the character. Effectively beginning the cast from the character\'s side.","lua_type":"number"}],"returns":[{"desc":"The result of casting a line of rays forwards","lua_type":"RaycastResult?"},{"desc":"The length of the smallest ray in the linecast","lua_type":"number?"}],"function_type":"method","private":true,"source":{"line":342,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_castUp","desc":"Casts a line of rays up in a horizontal fashion.","params":[{"name":"position","desc":"The position of the character when making the forward linecast.","lua_type":"Vector3"},{"name":"castLength","desc":"The length of the upward cast, keep in mind that this is added to half of the height of the character. Effectively beginning the cast from the character\'s \\"head.\\"","lua_type":"number"}],"returns":[{"desc":"The result of casting a line of rays forwards","lua_type":"RaycastResult?"},{"desc":"The length of the smallest ray in the linecast","lua_type":"number?"}],"function_type":"method","private":true,"source":{"line":363,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_castDown","desc":"Casts a line of rays down in a horizontal fashion.","params":[{"name":"position","desc":"The position of the character when making the forward linecast.","lua_type":"Vector3"},{"name":"castLength","desc":"The length of the downward cast, keep in mind that this is added to half of the height of the character. Effectively beginning the cast from the character\'s \\"feet.\\"","lua_type":"number"}],"returns":[{"desc":"The result of casting a line of rays forwards","lua_type":"RaycastResult?"},{"desc":"The length of the smallest ray in the linecast","lua_type":"number?"}],"function_type":"method","private":true,"source":{"line":384,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_shouldStepUp","desc":"Checks if the character should step up at a given position.","params":[{"name":"position","desc":"The position of the character, defaults to self.Position","lua_type":"Vector3?"}],"returns":[{"desc":"The height the character can step up, if applicable. If this is not returned (i.e. if it is nil), then the character should not step up.","lua_type":"number?"}],"function_type":"method","private":true,"source":{"line":403,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"SetState","desc":"Sets the state of the character.","params":[{"name":"state","desc":"State to set the character to","lua_type":"State"}],"returns":[],"function_type":"method","source":{"line":439,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_isGrounded","desc":"","params":[{"name":"position","desc":"The position of the character, defaults to self.Position","lua_type":"Vector3?"},{"name":"velocity","desc":"The velocity of the character, defaults to self.Velocity","lua_type":"Vector3?"}],"returns":[{"desc":"The result of the linecast towards the ground","lua_type":"RaycastResult?"},{"desc":"The length of the linecast towards the ground","lua_type":"number"}],"function_type":"method","private":true,"source":{"line":472,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"IsGrounded","desc":"Returns whether or not the character was calculated to be grounded on the most recent physics step. \\nThis should be used by any outside source trying to figure out if the character is grounded as it does not require any additional calculations by the internal physics engine.","params":[],"returns":[{"desc":"whether or not the character is grounded","lua_type":"boolean"}],"function_type":"method","source":{"line":497,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"IsAlive","desc":"Returns whether or not the character is alive. In other words, whether or not the physics engine has decide to kill the player or not.","params":[],"returns":[{"desc":"whether or not the character is alive","lua_type":"boolean"}],"function_type":"method","source":{"line":508,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"SwitchGravity","desc":"Switches the direction of gravity. \\nThe player will keep their velocity relative to the world space, meaning that since the ``Velocity`` property is relative to the character, its Y value will switch.","params":[],"returns":[],"function_type":"method","source":{"line":518,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Jump","desc":"Tells the internal physics engine whether or not the character should jump when they are grounded.","params":[{"name":"enabled","desc":"whether the character should jump or not","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":530,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_moveTo","desc":"Moves the character to a given position, calls the ``.Moved`` event with \\n```\\n(\\n    Vector3, -- The new position of the character, including the ground offset\\n    Vector3 -- The previous position of the character, including the ground offset\\n)\\n```","params":[{"name":"position","desc":"The position the character model should be moved to","lua_type":"Vector3"},{"name":"groundOffset","desc":"The offset to shift the character model by so that they can reach the ground.","lua_type":"number"}],"returns":[],"function_type":"method","private":true,"source":{"line":549,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"_updatePosition","desc":"The core movement physics updating system for the Character object. \\nIt calculates where the character should now be given a current position, velocity, and an amount of time passed.\\n\\nIf the character hits something and the physics system determines that the character should die, it will call the ``:Kill()`` function with the current physics position.","params":[{"name":"position","desc":"the position of the character","lua_type":"Vector3"},{"name":"velocity","desc":"the velocity of the character","lua_type":"Vector3"},{"name":"dt","desc":"the time passed since the last internal physics update","lua_type":"number"}],"returns":[{"desc":"the new calculated position of the character","lua_type":"Vector3"}],"function_type":"method","private":true,"source":{"line":582,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"InternalStep","desc":"Updates the internal clock, and handles the core physics calculations of the Character object. \\nMoves the character model, determines whether or not the character is grounded, and rotates the model accordingly.","params":[{"name":"dt","desc":"The amount of time passed since the last physics step. This is not automatically calculated for debugging and other reasons.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":678,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}}],"properties":[{"name":"ClassName","desc":"Will always be \\"Character\\". Used to check the class name of the object.","lua_type":"string","source":{"line":67,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"State","desc":"The state of the character.","lua_type":"State","source":{"line":73,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Model","desc":"Represents the character model of the Character. Contains the RootPart.","lua_type":"Model","source":{"line":79,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"RootPart","desc":"Represents the root part of the character model, all of the physics originates at the position of the root part. The Position of the Character object is the same as the root part\'s position.","lua_type":"BasePart","source":{"line":85,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Speed","desc":"The unsigned horizontal velocity of the character (in studs/second). Used as the basis for physics calculations.","lua_type":"number","source":{"line":91,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Position","desc":"The position of the root part. Origin of all the physics calculations, regardless of state.","lua_type":"Vector3","source":{"line":97,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Velocity","desc":"The unsigned velocity of the player. What this means is that it does not depend on the direction of gravity, or the movement direction of the player. In effect, it is relative to the actual character model.","lua_type":"Vector3","source":{"line":103,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Died","desc":"Event that fires when the character dies.\\n\\nCalled with:\\n```\\nposition: Vector3 -- The true position of the character model at the moment it dies\\n```","lua_type":"GoodSignal","tags":["events"],"source":{"line":115,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Moved","desc":"Event that fires when the character moves. Takes into account the player ground offset, and fires with the fake model position rather than the true player position,\\nsince the true player position is only necessary for physics calculations.\\n\\nCalled with:\\n```\\nnewPosition: Vector3 -- The new position of the character model\\noldPosition: Vector3 -- The old position of the character model\\ncharacterOffset: number -- The offset of the character to reach the ground (in world space)\\n```","lua_type":"GoodSignal","tags":["events"],"source":{"line":130,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"StateChanged","desc":"Event that fires when the character changes states.\\n\\nCalled with:\\n```\\nstate: StateChanged -- The new state of the character\\n```","lua_type":"GoodSignal","tags":["events"],"source":{"line":142,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}},{"name":"Destroyed","desc":"Event that fires when the character is destroyed. Is not called with anything.","lua_type":"GoodSignal","tags":["events"],"source":{"line":149,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}}],"types":[{"name":"State","desc":"Represents the movement state of the character.","fields":[{"name":"Default","lua_type":"\\"Default\\"","desc":"Default movement state"},{"name":"Flying","lua_type":"\\"Flying\\"","desc":"Flying movement state"}],"tags":["enum"],"source":{"line":56,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}}],"name":"Character","desc":"Handles the movement physics and state of the created character model.","source":{"line":40,"path":"src/ReplicatedStorage/Client/Components/Character.lua"}}')}}]);