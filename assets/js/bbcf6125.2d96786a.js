"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[842],{40107:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetAsync","desc":"","params":[{"name":"key","desc":"The key to get the data at","lua_type":"string"},{"name":"player","desc":"The player to get the data for, defaults to Players.LocalPlayer","lua_type":"Player?"}],"returns":[{"desc":"The requested data, will return nil if the data doesn\'t exist","lua_type":"any?"}],"function_type":"method","source":{"line":106,"path":"src/ReplicatedStorage/Client/Controllers/DataController.lua"}},{"name":"BindToChange","desc":"Gets a player\'s data, and returns a Promise that will either be resolved with:\\n```\\nConnection -- The connection to the LocalData\'s .Changed event\\n```\\nor rejected.\\n\\nThe bound function will always be called with:\\n```\\nany -- The new value of data[key]\\n```","params":[{"name":"key","desc":"The key to get the data at","lua_type":"string"},{"name":"func","desc":"The function to bind to the .Changed event for a given key","lua_type":"function"},{"name":"player","desc":"The player to get the data for, defaults to Players.LocalPlayer","lua_type":"Player?"}],"returns":[{"desc":"See below","lua_type":"Promise"}],"function_type":"method","source":{"line":132,"path":"src/ReplicatedStorage/Client/Controllers/DataController.lua"}},{"name":"OnReady","desc":"Gets a player\'s data, and returns a Promise that will either be resolved with:\\n```\\nLocalData -- The player\'s LocalData\\n```\\nor rejected.\\n\\nThis consequently means you could do something like this:\\n```lua\\nDataController:OnReady():andThen(function(data)\\n\\t-- you can assume that all of your data has loaded at this point\\n\\tlocal coins = data:Get(\\"Coins\\")\\n\\tlocal xp = data:Get(\\"XP\\")\\n\\tlocal level = data:Get(\\"Level\\")\\nend):catch(print)\\n```","params":[{"name":"player","desc":"The player to get the data object for, defaults to Players.LocalPlayer","lua_type":"Player?"}],"returns":[{"desc":"A promise that is called with the player\'s LocalData object","lua_type":"Promise"}],"function_type":"method","source":{"line":167,"path":"src/ReplicatedStorage/Client/Controllers/DataController.lua"}}],"properties":[],"types":[],"name":"DataController","desc":"Controls anything related to player data.\\nIt should be noted that although the methods attached to this Controller are labelled ``Async``, that does not mean that it takes time to fetch the value\'s from the server.\\nInstead, it just means that they return Promises that are resolved immediately if data is already cached on the client, or in the future if data is not yet cached on the client.\\nIf you happen to supply another player into any of the events, there is a possibility that the Promise will be rejected in the case that the player leaves before their data can be fetched.\\nThis typically shouldn\'t be an issue you have to catch.","source":{"line":53,"path":"src/ReplicatedStorage/Client/Controllers/DataController.lua"}}')}}]);