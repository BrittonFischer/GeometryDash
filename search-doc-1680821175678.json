[{"title":"CameraController","type":0,"sectionRef":"#","url":"/GeometryDash/api/CameraController","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#types","content":" "},{"title":"State​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#State","content":"enum &lt;/&gt; interface State { Following: 0-- Following a character Menu: 1-- In the menu Fixed: 2-- Unchanging, fixed to the most recent camera position } Represents the movement state of the character. "},{"title":"Properties​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#properties","content":" "},{"title":"Camera​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#Camera","content":"&lt;/&gt; CameraController.Camera: Camera  The current camera object for the player.  "},{"title":"State​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#State","content":"&lt;/&gt; CameraController.State: State The current state of the camera. "},{"title":"Functions​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#functions","content":" "},{"title":"SetState​","type":1,"pageTitle":"CameraController","url":"/GeometryDash/api/CameraController#SetState","content":"&lt;/&gt; CameraController:SetState( state: State-- The State to set the camera to ) → () Sets the camera state to the given state, if not already set. "},{"title":"Character","type":0,"sectionRef":"#","url":"/GeometryDash/api/Character","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#types","content":" "},{"title":"State​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#State","content":"enum &lt;/&gt; interface State { Default: &quot;Default&quot;-- Default movement state Flying: &quot;Flying&quot;-- Flying movement state } Represents the movement state of the character. "},{"title":"Properties​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#properties","content":" "},{"title":"ClassName​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#ClassName","content":"&lt;/&gt; Character.ClassName: string Will always be &quot;Character&quot;. Used to check the class name of the object.  "},{"title":"State​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#State","content":"&lt;/&gt; Character.State: State The state of the character.  "},{"title":"Model​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Model","content":"&lt;/&gt; Character.Model: Model  Represents the character model of the Character. Contains the RootPart.  "},{"title":"RootPart​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#RootPart","content":"&lt;/&gt; Character.RootPart: BasePart  Represents the root part of the character model, all of the physics originates at the position of the root part. The Position of the Character object is the same as the root part's position.  "},{"title":"Speed​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Speed","content":"&lt;/&gt; Character.Speed: number The unsigned horizontal velocity of the character (in studs/second). Used as the basis for physics calculations.  "},{"title":"Position​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Position","content":"&lt;/&gt; Character.Position: Vector3  The position of the root part. Origin of all the physics calculations, regardless of state.  "},{"title":"Velocity​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Velocity","content":"&lt;/&gt; Character.Velocity: Vector3  The unsigned velocity of the player. What this means is that it does not depend on the direction of gravity, or the movement direction of the player. In effect, it is relative to the actual character model.  "},{"title":"Died​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Died","content":"events &lt;/&gt; Character.Died: GoodSignal Event that fires when the character dies. Called with: position: Vector3 -- The true position of the character model at the moment it dies   "},{"title":"Moved​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Moved","content":"events &lt;/&gt; Character.Moved: GoodSignal Event that fires when the character moves. Takes into account the player ground offset, and fires with the fake model position rather than the true player position, since the true player position is only necessary for physics calculations. Called with: newPosition: Vector3 -- The new position of the character model oldPosition: Vector3 -- The old position of the character model characterOffset: number -- The offset of the character to reach the ground (in world space)   "},{"title":"StateChanged​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#StateChanged","content":"events &lt;/&gt; Character.StateChanged: GoodSignal Event that fires when the character changes states. Called with: state: StateChanged -- The new state of the character   "},{"title":"Destroyed​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Destroyed","content":"events &lt;/&gt; Character.Destroyed: GoodSignal Event that fires when the character is destroyed. Is not called with anything. "},{"title":"Functions​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#new","content":"&lt;/&gt; Character.new( startPosition: Vector3? ,-- Starting position of the character, defaults to &lt;0,0,0&gt; collisionGroup: string?,-- Collision group of the character, defaults to &quot;Collidables&quot; imageProps: [State: string]?-- The image properties of the character, give each state its own image. Defaults to default character image properties. ) → Character-- generated Character object Generates a character model at startPosition, and builds a Character object to handle its physics. You can update the collision group as time goes on by calling :SetCollisionGroup(string).  "},{"title":"Destroy​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Destroy","content":"&lt;/&gt; Character:Destroy() → () Destroys the Character object by destroying the character model, cleaning up events, and killing its metatable.  "},{"title":"Kill​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Kill","content":"&lt;/&gt; Character:Kill( position: Vector3? ,-- The position that the character is killed at finished: boolean?-- Whether or not the character died from finishing the level ) → () Kills the Character, eventually calling :Destroy() on it aswell.  "},{"title":"ForceJump​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#ForceJump","content":"&lt;/&gt; Character:ForceJump() → () Makes the character jump  "},{"title":"SetCollisionGroup​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#SetCollisionGroup","content":"&lt;/&gt; Character:SetCollisionGroup( collisionGroup: string-- sets the collision group for the character, defaults to &quot;Collidables&quot; ) → () Sets the raycast collision group for the physics engine  "},{"title":"SetState​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#SetState","content":"&lt;/&gt; Character:SetState( state: State-- State to set the character to ) → () Sets the state of the character.  "},{"title":"IsGrounded​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#IsGrounded","content":"&lt;/&gt; Character:IsGrounded() → boolean-- whether or not the character is grounded Returns whether or not the character was calculated to be grounded on the most recent physics step. This should be used by any outside source trying to figure out if the character is grounded as it does not require any additional calculations by the internal physics engine.  "},{"title":"IsAlive​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#IsAlive","content":"&lt;/&gt; Character:IsAlive() → boolean-- whether or not the character is alive Returns whether or not the character is alive. In other words, whether or not the physics engine has decide to kill the player or not.  "},{"title":"SwitchGravity​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#SwitchGravity","content":"&lt;/&gt; Character:SwitchGravity() → () Switches the direction of gravity. The player will keep their velocity relative to the world space, meaning that since the Velocity property is relative to the character, its Y value will switch.  "},{"title":"Jump​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#Jump","content":"&lt;/&gt; Character:Jump( enabled: boolean-- whether the character should jump or not ) → () Tells the internal physics engine whether or not the character should jump when they are grounded.  "},{"title":"InternalStep​","type":1,"pageTitle":"Character","url":"/GeometryDash/api/Character#InternalStep","content":"&lt;/&gt; Character:InternalStep( dt: number-- The amount of time passed since the last physics step. This is not automatically calculated for debugging and other reasons. ) → () Updates the internal clock, and handles the core physics calculations of the Character object. Moves the character model, determines whether or not the character is grounded, and rotates the model accordingly. "},{"title":"CharacterController","type":0,"sectionRef":"#","url":"/GeometryDash/api/CharacterController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#properties","content":" "},{"title":"Character​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#Character","content":"&lt;/&gt; CharacterController.Character: Character The current Character component.  "},{"title":"CharacterPosition​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterPosition","content":"&lt;/&gt; CharacterController.CharacterPosition: Vector3  The position of the character model, updated every frame that the character exists.  "},{"title":"CharacterEnum​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterEnum","content":"&lt;/&gt; CharacterController.CharacterEnum: table Same as Character.Enum, from the Character Component.  "},{"title":"CharacterAdded​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterAdded","content":"events &lt;/&gt; CharacterController.CharacterAdded: GoodSignal Event that fires whenever a new character is created. Called with: character: Character -- The new character component characterPosition: Vector3 -- The spawn position of the character   "},{"title":"CharacterMoved​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterMoved","content":"events &lt;/&gt; CharacterController.CharacterMoved: GoodSignal Event that fires when the character moves. Takes into account the player ground offset, and fires with the fake model position rather than the true player position, since the true player position is only necessary for physics calculations. Called with: newPosition: Vector3 -- The new position of the character model oldPosition: Vector3 -- The old position of the character model characterOffset: number -- The offset of the character to reach the ground (in world space)   "},{"title":"CharacterDied​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterDied","content":"events &lt;/&gt; CharacterController.CharacterDied: GoodSignal Event that fires when the character dies. Called with: position: Vector3 -- The true position of the character model at the moment it dies   "},{"title":"CharacterStateChanged​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterStateChanged","content":"events &lt;/&gt; CharacterController.CharacterStateChanged: GoodSignal Event that fires when the character changes states. Called with: state: StateChanged -- The new state of the character   "},{"title":"CharacterDestroyed​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CharacterDestroyed","content":"events &lt;/&gt; CharacterController.CharacterDestroyed: GoodSignal Event that fires when the character is destroyed. Is not called with anything. "},{"title":"Functions​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#functions","content":" "},{"title":"CreateCharacter​","type":1,"pageTitle":"CharacterController","url":"/GeometryDash/api/CharacterController#CreateCharacter","content":"&lt;/&gt; CharacterController:CreateCharacter() → () Creates a new character, and will destroy the current character if one already exists. "},{"title":"ClientData","type":0,"sectionRef":"#","url":"/GeometryDash/api/ClientData","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#properties","content":" "},{"title":"_data​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#_data","content":"&lt;/&gt; ClientData._data: [string: any] The dictionary containing player data, stored in &lt;key: value&gt; pairs, effectively.. just as a dictionary.  "},{"title":"Changed​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#Changed","content":"&lt;/&gt; ClientData.Changed: GoodSignal The event fired whenever the player's data changes. It is fired with: string -- The key updated any -- The new value at the supplied key  "},{"title":"Functions​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#new","content":"&lt;/&gt; ClientData.new( replica: Replica-- The Replica to build the Data object off of ) → ClientData-- The created object Creates a ClientData object from a given replica.  "},{"title":"Destroy​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#Destroy","content":"&lt;/&gt; ClientData:Destroy() → () Destroys the ClientData object and cleans up any objects.  "},{"title":"Get​","type":1,"pageTitle":"ClientData","url":"/GeometryDash/api/ClientData#Get","content":"&lt;/&gt; ClientData:Get( key: string-- The key to get the data from in the user's profile ) → any?-- The data snagged from the user's profile at the given key Gets the player data at a given key "},{"title":"Data","type":0,"sectionRef":"#","url":"/GeometryDash/api/Data","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#properties","content":" "},{"title":"_profile​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#_profile","content":"&lt;/&gt; Data._profile: Profile The Profile of the user that the Data is based on. See: ProfileService for more information on Profile's.  "},{"title":"Replica​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#Replica","content":"&lt;/&gt; Data.Replica: Replica The Replica used to replicate the player's data. See ReplicaService for more information on Replica's. You can access Replica directly to do manual data manipulation.  "},{"title":"Changed​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#Changed","content":"events &lt;/&gt; Data.Changed: GoodSignal The event fired whenever the player's data changes. It is fired with: string -- The key updated any -- The new value at the supplied key any -- The old value at the supplied key  "},{"title":"Functions​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#new","content":"&lt;/&gt; Data.new( player: Player ,-- The player to create data for profile: Profile,-- The player's profile replicationType: string?-- The replication type to use for player data, defaults to &quot;All&quot;. ) → () Creates a Data object from a given player and profile.  "},{"title":"Get​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#Get","content":"&lt;/&gt; Data:Get( key: string-- The key to get the data from in the user's profile ) → any?-- The data snagged from the user's profile at a given key Gets the player data at a given key  "},{"title":"Increment​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#Increment","content":"&lt;/&gt; Data:Increment( key: string,-- The key to increment in the user's profile increment: int-- The amount to increment the value by ) → () Increment's a player's data at a given key by a supplied increment. Then fires the .Changed event with: string -- The key incremented any -- The new value at the supplied key   "},{"title":"Set​","type":1,"pageTitle":"Data","url":"/GeometryDash/api/Data#Set","content":"&lt;/&gt; Data:Set( key: string,-- The key to set in the user's profile value: any-- The value to set the key to in the user's profile ) → () Sets's a player's data at a given key. Then fires the .Changed event with: string -- The key set any -- The new value at the supplied key  "},{"title":"DataController","type":0,"sectionRef":"#","url":"/GeometryDash/api/DataController","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DataController","url":"/GeometryDash/api/DataController#functions","content":" "},{"title":"GetAsync​","type":1,"pageTitle":"DataController","url":"/GeometryDash/api/DataController#GetAsync","content":"&lt;/&gt; DataController:GetAsync( key: string,-- The key to get the data at player: Player? -- The player to get the data for, defaults to Players.LocalPlayer ) → any?-- The requested data, will return nil if the data doesn't exist   "},{"title":"BindToChange​","type":1,"pageTitle":"DataController","url":"/GeometryDash/api/DataController#BindToChange","content":"&lt;/&gt; DataController:BindToChange( key: string,-- The key to get the data at func: function,-- The function to bind to the .Changed event for a given key player: Player? -- The player to get the data for, defaults to Players.LocalPlayer ) → Promise-- See below Gets a player's data, and returns a Promise that will either be resolved with: Connection -- The connection to the LocalData's .Changed event or rejected. The bound function will always be called with: any -- The new value of data[key]   "},{"title":"OnReady​","type":1,"pageTitle":"DataController","url":"/GeometryDash/api/DataController#OnReady","content":"&lt;/&gt; DataController:OnReady( player: Player? -- The player to get the data object for, defaults to Players.LocalPlayer ) → Promise-- A promise that is called with the player's LocalData object Gets a player's data, and returns a Promise that will either be resolved with: LocalData -- The player's LocalData or rejected. This consequently means you could do something like this: DataController:OnReady():andThen(function(data) -- you can assume that all of your data has loaded at this point local coins = data:Get(&quot;Coins&quot;) local xp = data:Get(&quot;XP&quot;) local level = data:Get(&quot;Level&quot;) end):catch(print)  "},{"title":"Effect","type":0,"sectionRef":"#","url":"/GeometryDash/api/Effect","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#new","content":"&lt;/&gt; Effect.new( location: Character | Vector3 ,-- The location in world space, or a Character object, that the effect should be tied to direction: Vector3 ,-- The lookVector of the effect, all effects are front-facing type: ClassName,-- The class name of the effect to create props: [string: any?] | string,-- The properties of the effect object created from the given type. If a string is provided it uses BASE_EFFECTS[props] offset: Vector3? ,-- The offset of the effect, in the world space. timeAlive: number?-- The duration the effect should last for, defaults to inf ) → Effect-- the Effect object created Creates a new Effect, can either be in the world space (Vector3), or tied to a Character object.  "},{"title":"Destroy​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#Destroy","content":"&lt;/&gt; Effect:Destroy() → () Destroys and cleans up the Effect.  "},{"title":"Enable​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#Enable","content":"&lt;/&gt; Effect:Enable( enabled: boolean-- Whether or not the effect is enabled ) → () Disables/Enables the effect  "},{"title":"Rotate​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#Rotate","content":"&lt;/&gt; Effect:Rotate( rotation: CFrame -- the new rotation of the effect object ) → () Sets the rotation of an effect, to be set the next time the character moves. This can only be used if the effect is tied to a Character component.  "},{"title":"SetOffset​","type":1,"pageTitle":"Effect","url":"/GeometryDash/api/Effect#SetOffset","content":"&lt;/&gt; Effect:SetOffset( offset: Vector3? -- the new offset of the effect object, defaults to &lt;0,0,0&gt; ) → () Sets the offset of an effect, to be set the next time the character moves. This can only be used if the effect is tied to a Character component. "},{"title":"InputController","type":0,"sectionRef":"#","url":"/GeometryDash/api/InputController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#properties","content":" "},{"title":"_states​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#_states","content":"&lt;/&gt; InputController._states: [string: boolean]  warning This property is private, but has not been identified as such to make it easier to understand the StateChanged property regardless of docs settings. You should use the :IsActive() method to check states. Holds all of the input related states (controlled by pressing/holding an input using any of the selected keybinds).  "},{"title":"StateChanged​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#StateChanged","content":"events &lt;/&gt; InputController.StateChanged: [string: GoodSignal] Holds all of the events which are called whenever a state changes. For instance, you might have a boolean state called Jump, which is also a member of InputController._states. In this case Jump would also be a member of InputController, and would be fired whenever the Jump`` state changes from true -&gt; false, or false -&gt; true. All events here will be called with: boolean active -- whether or not the state is active (key/button pressed or not)   "},{"title":"Keybinds​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#Keybinds","content":"&lt;/&gt; InputController.Keybinds: [string: any?[]] Holds all of the keybind data. Keybind data is setup such that you have a string equal to any number of Enum.UserInputType's or Enum.KeyCode's.  "},{"title":"PrimaryInput​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#PrimaryInput","content":"&lt;/&gt; InputController.PrimaryInput: string Explicity states what the primary input is, which can be any one of the following: - &quot;Mouse&quot; - &quot;Gamepad&quot; - &quot;Touch&quot; Note that the keyboard is not considered to be a &quot;primary input&quot;, as it is not directly used to interact with the UI or world space. "},{"title":"Functions​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#functions","content":" "},{"title":"IsActive​","type":1,"pageTitle":"InputController","url":"/GeometryDash/api/InputController#IsActive","content":"&lt;/&gt; InputController:IsActive( stateName: string-- the state to check ) → boolean?-- whether or not the state is active Checks if a given input state is active or not (whether or not a key/button associated with a keybind is pressed or not). Returns nil if the state does not exist "},{"title":"DataService","type":0,"sectionRef":"#","url":"/GeometryDash/api/DataService","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#properties","content":" "},{"title":"DataLoaded​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#DataLoaded","content":"events &lt;/&gt; DataService.DataLoaded: Signal An event that is fired whenever a new player's data is loaded. You might consider using :BindToDataLoaded() if you need it to also call the function you want to connect with all existing player data aswell. Fired with: Player -- The player who &quot;owns&quot; the Data object Data -- The Data object for the specific Player   "},{"title":"DataReleased​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#DataReleased","content":"events &lt;/&gt; DataService.DataReleased: Signal An event that is fired whenever a player's data is released. Fired with: Player -- The player who &quot;owned&quot; the Data object that has since been destroyed   "},{"title":"DataChanged​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#DataChanged","content":"events &lt;/&gt; DataService.DataChanged: {[string]: Signal} An event that is fired whenever a player's data changes. You might consider using :BindToDataChanged() if you need it to also call the function you want to connect with all current player data aswell. Each event for a specific key is fired with: Player -- The player who &quot;owns&quot; the Data object any -- The new value of the player's data at the provided key See BASE_PROFILE for information on what data key's exist. "},{"title":"Functions​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#functions","content":" "},{"title":"BindToDataLoaded​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#BindToDataLoaded","content":"&lt;/&gt; DataService:BindToDataLoaded( callback: ( player: Player , data: {[string]: any} ) → ()-- The function to call whenever a player's data loads ) → Connection-- Connection for the player's data loaded, call :Disconnect() to destroy this connection Binds a function to be called whenever player data loads. Will also call the function with player data that has already been loaded, unlike the .DataLoaded event. See .DataLoaded for information on what this event is fired with.  "},{"title":"BindToDataChanged​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#BindToDataChanged","content":"&lt;/&gt; DataService:BindToDataChanged( key: string,-- The key to bind the function to func: (...any) → ()-- The function to call whenever a player's data changes at a given key ) → Connection-- Connection for the player's data changes, call :Disconnect() to destroy this connection Binds a function to be called whenever player data changes for a given key. Will also call the function with player data that has already been loaded, unlike the .DataChanged events. See .DataChanged for information on what this event is fired with. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;KeyNotString&quot;\tIf key is not a string &quot;KeyDoesNotExist&quot;\tIf the provided key does not exist within the data structure  "},{"title":"Get​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#Get","content":"&lt;/&gt; DataService:Get( player: Player ,-- The player to get the data for key: string-- The key to use as the index for the player data ) → any?-- The value at data[key] for a player's data, nil if the data at the given key does not exist Gets a player's data from the data system. The same as calling Data:Get(key) on the player's Data object. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;KeyNotString&quot;\tIf key is not a string &quot;KeyDoesNotExist&quot;\tIf the key does not exist within the data structure (BASE_PROFILE dictionary) &quot;DataDoesNotExist&quot;\tIf the player's profile has been released  "},{"title":"GetAsync​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#GetAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataService:GetAsync( player: Player ,-- The player to get the data for key: string-- The key to use as the index for the player data ) → Promise-- A promise that is either resolved with the value at data[key] for a player's data, or nil if the data at the given key does not exist. It will reject with a &quot;DataDoesNotExist&quot; error if the player's profile is released. Asynchronously gets a player's data from the data system. The same as calling Data:Get(key) on the player's Data object. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;KeyNotString&quot;\tIf key is not a string &quot;KeyDoesNotExist&quot;\tIf the key does not exist within the data structure (BASE_PROFILE dictionary)  "},{"title":"GetDataPromise​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#GetDataPromise","content":"&lt;/&gt; DataService:GetDataPromise( player: Player -- The player to get the data for ) → Promise-- Promise that resolves with the player's Data component, or throws an error. Gets a player's data from the data system. The same as calling Data:Get(key) on the player's Data object. This is used internally for certain methods, and externally so that you can do custom data manipulation. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;DataDoesNotExist&quot;\tIf the player's profile has been released  "},{"title":"SetAsync​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#SetAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataService:SetAsync( player: Player ,-- The player to get the data for key: string,-- The key to use as the index for the player data value: any-- The value to set the player data at key to ) → Promise-- A promise that is either resolved automatically, or rejected with a &quot;DataDoesNotExist&quot; error if the player's profile is released. Sets a player's data in the data system asynchronously. The same as calling Data:Set(key) on the player's Data object. It returns a promise that will reject with &quot;DataDoesNotExist&quot; if the player's profile has been released. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;KeyNotString&quot;\tIf key is not a string &quot;KeyDoesNotExist&quot;\tIf the key does not exist within the data structure (BASE_PROFILE dictionary) &quot;DataDoesNotExist&quot;\tIf the player's profile has been released &quot;ValueIsNil&quot;\tIf no value was provided, you cannot set a data value to nil  "},{"title":"IncrementAsync​","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService#IncrementAsync","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; DataService:IncrementAsync( player: Player ,-- The player to get the data for key: string,-- The key to use as the index for the player data increment: number-- The amount to increment the player data at key by ) → any-- The value at data[key] for a player's data Gets a player's data from the data system. The same as calling Data:Get(key) on the player's Data object. "},{"title":"Errors","type":1,"pageTitle":"DataService","url":"/GeometryDash/api/DataService##","content":"Type\tDescription&quot;KeyNotString&quot;\tIf key is not a string &quot;KeyDoesNotExist&quot;\tIf the key does not exist within the data structure (BASE_PROFILE dictionary) &quot;DataDoesNotExist&quot;\tIf the player's profile has been released &quot;ValueIsNotANumber&quot;\tIf the value at data[key] is not a number, you cannot increment anything that isn't a number &quot;IncrementIsNotANumber&quot;\tIf the increment is not a number "},{"title":"Map","type":0,"sectionRef":"#","url":"/GeometryDash/api/Map","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#types","content":" "},{"title":"ChunkData​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#ChunkData","content":"&lt;/&gt; interface ChunkData { Instance: BasePart -- The BasePart that the chunk data is based on CFrame: CFrame -- The initial CFrame of the Instance Image: ImageLabel? -- The image label for the Instance, if applicable Action: Dict?-- More information to come }   "},{"title":"Chunk​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#Chunk","content":"&lt;/&gt; interface Chunk { Folder: Folder -- Folder containing that chunk's objects Actions: ChunkData[]-- ChunkData for all actions within that chunk Collidables: ChunkData[]-- ChunkData for all collidable objects within that chunk Uncollidables: ChunkData[]-- ChunkData for all uncollidable objects within that chunk } Chunk data is used to map out a chunk. Chunk mapping is done for all chunks in a Map whenever Map.new() is called. "},{"title":"Properties​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#properties","content":" "},{"title":"Chunks​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#Chunks","content":"&lt;/&gt; Map.Chunks: Chunk[] Contains all of the currently loaded map chunks. self.Chunks = {} -- Chunk[], contains all of the loaded map chunks self.StaticsFolder = staticsFolder -- contains all static objects self.ChunksFolder = chunksFolder -- contains all raw chunk objects  "},{"title":"StaticsFolder​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#StaticsFolder","content":"&lt;/&gt; Map.StaticsFolder: Folder  Contains all of the Static map objects. Note that by Static here, it doesn't mean they don't move, but rather that they are abstracted from the chunk loading/unloading system. Basically it contains all of the Instance's which are permanently loaded into the map. This is useful for things like backgrounds, flooring, ceiling, etc.  "},{"title":"ChunksFolder​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#ChunksFolder","content":"&lt;/&gt; Map.ChunksFolder: Folder  Contains all of the raw chunk data. This is parsed and stored in the Chunks property. "},{"title":"Functions​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#new","content":"&lt;/&gt; Map.new( baseMap: folder,-- The folder to use as the map file's base leftVision: number,-- The vision the character has to the left (# of chunks before an object is deleted) rightVision: number-- The vision the character has to the right (# of chunks before an object is inserted) ) → Map-- the Map object Creates a new Map object from a given map file.  "},{"title":"Destroy​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#Destroy","content":"&lt;/&gt; Map:Destroy() → () Destroys and cleans up the current Map object.  "},{"title":"Reload​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#Reload","content":"&lt;/&gt; Map:Reload( resetAttempts: boolean-- Whether or not to reset the number of attempts displayed. (Used when a character beats a map) ) → ( Chunk[],-- Array of chunks initially loaded into the map Vector3 -- The map's Character starting position ) Reloads the current map file  "},{"title":"Move​","type":1,"pageTitle":"Map","url":"/GeometryDash/api/Map#Move","content":"&lt;/&gt; Map:Move( character: Character,-- The current character object newPosition: Vector3 -- The new position of the character model in the world space ) → () Moves the loaded based on the Character's movement. Will load/unload chunks as necessary. Also handles action updating by calling their :Update() method. "},{"title":"InterfaceController","type":0,"sectionRef":"#","url":"/GeometryDash/api/InterfaceController","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#types","content":" "},{"title":"UnmountKey​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#UnmountKey","content":"&lt;/&gt; type UnmountKey = any A key, specifically created using newproxy(), that can be used to unmount an interface which was previously mounted using Mount(). "},{"title":"Properties​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#properties","content":" "},{"title":"PlayerGui​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#PlayerGui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; InterfaceController.PlayerGui: PlayerGui  Reference to the local player's PlayerGui object.  "},{"title":"GameGui​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#GameGui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; InterfaceController.GameGui: ScreenGui  Reference to the main ScreenGui object which contains any interfaces mounted without explicitly providing a parent object to mount it to. "},{"title":"Functions​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#functions","content":" "},{"title":"Mount​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#Mount","content":"&lt;/&gt; InterfaceController:Mount( interface: GuiBase | GuiBase2d , parent: Instance? ) → UnmountKey Mounts an interface to the supplied parent. If no parent is supplied, then the interface will be mounted to GameGui. To mount interfaces to a BasePart, you can supply either a GuiBase, or a SurfaceGui for the interface argument. You should then supply a BasePart for the parent argument. If you supply a GuiBase instead of a SurfaceGui, then the interface will be mounted to a new SurfaceGui. If the interface is already mounted, then this function will return theUnmountKey that was previously returned by Mount().  "},{"title":"Unmount​","type":1,"pageTitle":"InterfaceController","url":"/GeometryDash/api/InterfaceController#Unmount","content":"&lt;/&gt; InterfaceController:Unmount(unmountKey: UnmountKey) → boolean Unmounts an interface that was previously mounted using Mount(). The unmount process will be performed immediately, and will result in the destruction of the interface. If you supplied a parent argument to Mount(), the parent object will not be destroyed. Returns a boolean indicating whether or not the interface was successfully unmounted. "},{"title":"SharedModules","type":0,"sectionRef":"#","url":"/GeometryDash/api/SharedModules","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SharedModules","url":"/GeometryDash/api/SharedModules#functions","content":" "},{"title":"Linecast​","type":1,"pageTitle":"SharedModules","url":"/GeometryDash/api/SharedModules#Linecast","content":"&lt;/&gt; SharedModules.Linecast( origin: Vector3 ,-- The origin of the boxcast direction: Vector3 ,-- The direction of the boxcast upVector: Vector3 ,-- The up vector of the boxcast height: number,-- The height of the box to cast raycastParams: RaycastParams,-- The raycast parameters minLength: number-- the minimum length of any returned cast, defaults to 0 ) → ( RaycastResult,-- The result of the linecast number-- The final length of the linecast ) Linecasts from an origin in a given direction. Returns the closest object hit, if present. "},{"title":"MapController","type":0,"sectionRef":"#","url":"/GeometryDash/api/MapController","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#properties","content":" "},{"title":"Map​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#Map","content":"&lt;/&gt; MapController.Map: Map? The current Map component.  "},{"title":"StartPosition​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#StartPosition","content":"&lt;/&gt; MapController.StartPosition: Vector3?  The starting position on the current map.  "},{"title":"Chunks​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#Chunks","content":"&lt;/&gt; MapController.Chunks: Chunks The chunks of the current map. See: Map for the Chunks interface. "},{"title":"Functions​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#functions","content":" "},{"title":"ChangeState​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#ChangeState","content":"&lt;/&gt; MapController:ChangeState( state: Character.Enum.State,-- The character's new state speed: number-- The speed at which to animate the state change ) → () Updates the map state based on the Character state. Currently just moves floors/ceilings up/down.  "},{"title":"LoadMap​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#LoadMap","content":"&lt;/&gt; MapController:LoadMap( mapName: string,-- The name of the map to load leftVision: number,-- The vision the player should have to the left, defaults to LEFT_VISION rightVision: number-- The vision the player should have to the left defaults to RIGHT_VISION ) → Map?-- the map loaded, returns nil if the map with the given name does not exist Loads a map from a base located in ReplicatedStorage/Maps. Displays a warning if the map does not exist.  "},{"title":"ReloadMap​","type":1,"pageTitle":"MapController","url":"/GeometryDash/api/MapController#ReloadMap","content":"&lt;/&gt; MapController:ReloadMap( map: Map?-- The map to use, only necessary if you want to reload a specific Map object. Defaults to self.Map. ) → () Reloads a Map around the starter position of the Map. Nearby chunks load instantly and do not run any animations. "}]